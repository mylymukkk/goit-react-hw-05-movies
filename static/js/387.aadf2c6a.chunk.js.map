{"version":3,"file":"static/js/387.aadf2c6a.chunk.js","mappings":"4OAEaA,EAAWC,EAAAA,GAAAA,GAAH,0NAURC,EAAQD,EAAAA,GAAAA,IAAH,gIAQLE,EAAOF,EAAAA,GAAAA,GAAH,iQAiBJG,EAASH,EAAAA,GAAAA,EAAH,kK,kBCuBnB,EArDa,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAYN,GACTO,MAAK,SAAAC,GACJJ,EAAYI,EACb,IAEAC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EACf,GACJ,GAAE,CAACV,KAGF,gCACuB,IAApBG,EAASS,SACR,SAACjB,EAAD,UACGQ,EAASU,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACpC,OACE,UAACnB,EAAD,WACGmB,GACC,SAACpB,EAAD,CACEqB,IAAK,kCAAoCD,EACzCE,IAAKH,KAGP,SAACnB,EAAD,CACEqB,IAAI,0DACJC,IAAI,eAGR,0BACE,0CACCJ,MAEH,0BACE,oCADF,IACsBC,OAjBbF,EAqBd,MAIgB,IAApBX,EAASS,SACR,SAACb,EAAD,yDAIP,C,+LCxDKqB,EAAiB,mCAIhB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6FACCC,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAFN,SAIkBK,EAAAA,EAAAA,IAAA,8BAAiCH,IAJnD,cAICI,EAJD,yBAKEA,EAASlB,KAAKmB,SALhB,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,gFACCP,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAFN,SAIkBK,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,YAA+BP,IAJjD,cAICI,EAJD,yBAKEA,EAASlB,MALX,kEAQA,SAAesB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,gFACCT,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,EACTW,MAAAA,IAHG,SAKkBN,EAAAA,EAAAA,IAAA,wBAA2BH,IAL7C,cAKCI,EALD,yBAMEA,EAASlB,KAAKmB,SANhB,kEASA,SAAerB,EAAtB,+CAAO,OAAP,oBAAO,WAA2BuB,GAA3B,gFACCP,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,IAFN,SAIkBK,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,oBAAuCP,IAJzD,cAICI,EAJD,yBAKEA,EAASlB,KAAKwB,MALhB,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BJ,GAA7B,gFACCP,EAAc,IAAIC,gBAAgB,CACtCC,QAASJ,EACTc,SAAU,UAHP,SAKkBT,EAAAA,EAAAA,IAAA,iBAAoBI,EAApB,oBAAuCP,IALzD,cAKCI,EALD,yBAMEA,EAASlB,KAAKmB,SANhB,kEAnCPF,EAAAA,EAAAA,SAAAA,QAAyB,8B","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 16px;\n  padding: 10px;\n  margin: 0 auto;\n  max-width: calc(100vw - 48px);\n  list-style: none;\n`;\n\nexport const Image = styled.img`\n  margin: 0 auto 10px;\n  width: 200px;\n  height: 300px;\n  object-fit: cover;\n  border-radius: 5px;\n`;\n\nexport const Item = styled.li`\n  padding: 10px;\n  border: 1px solid orangered;\n  border-radius: 5px;\n  text-align: center;\n\n  & p {\n    margin-bottom: 5px;\n    font-size: 14px;\n  }\n\n  & span {\n    font-weight: 500;\n    text-transform: uppercase;\n  }\n`;\n\nexport const NoInfo = styled.p`\n  padding: 10px;\n  border: 1px solid orangered;\n  border-radius: 5px;\n  text-align: justify;\n  line-height: 1.4;\n  font-size: 14px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport { CastList, Image, Item, NoInfo } from './Cast.styled';\n\nimport { getCastById } from 'services/Api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castInfo, setCastInfo] = useState([]);\n\n  useEffect(() => {\n    getCastById(movieId)\n      .then(data => {\n        setCastInfo(data);\n      })\n\n      .catch(error => {\n        console.error(error);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {castInfo.length !== 0 && (\n        <CastList>\n          {castInfo.map(({ id, character, name, profile_path }) => {\n            return (\n              <Item key={id}>\n                {profile_path ? (\n                  <Image\n                    src={'https://image.tmdb.org/t/p/w500' + profile_path}\n                    alt={name}\n                  ></Image>\n                ) : (\n                  <Image\n                    src=\"https://via.placeholder.com/200x300.png?text=no%20image\"\n                    alt=\"Not found\"\n                  ></Image>\n                )}\n                <p>\n                  <span>Character: </span>\n                  {character}\n                </p>\n                <p>\n                  <span>Name:</span> {name}\n                </p>\n              </Item>\n            );\n          })}\n        </CastList>\n      )}\n\n      {castInfo.length === 0 && (\n        <NoInfo>We don`t have information for this movie</NoInfo>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst MOVIES_API_KEY = '84c0cdd7fd9e4d5f8788ea3746d1dc48';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function getTrendingMovies() {\n  const queryParams = new URLSearchParams({\n    api_key: MOVIES_API_KEY,\n  });\n  const response = await axios.get(`/trending/movie/day?${queryParams}`);\n  return response.data.results;\n}\n\nexport async function getMovieById(MovieId) {\n  const queryParams = new URLSearchParams({\n    api_key: MOVIES_API_KEY,\n  });\n  const response = await axios.get(`/movie/${MovieId}?${queryParams}`);\n  return response.data;\n}\n\nexport async function getMoviesByQuery(query) {\n  const queryParams = new URLSearchParams({\n    api_key: MOVIES_API_KEY,\n    query,\n  });\n  const response = await axios.get(`/search/movie?${queryParams}`);\n  return response.data.results;\n}\n\nexport async function getCastById(MovieId) {\n  const queryParams = new URLSearchParams({\n    api_key: MOVIES_API_KEY,\n  });\n  const response = await axios.get(`/movie/${MovieId}/credits?${queryParams}`);\n  return response.data.cast;\n}\n\nexport async function getReviewById(MovieId) {\n  const queryParams = new URLSearchParams({\n    api_key: MOVIES_API_KEY,\n    language: 'en-US',\n  });\n  const response = await axios.get(`/movie/${MovieId}/reviews?${queryParams}`);\n  return response.data.results;\n}\n"],"names":["CastList","styled","Image","Item","NoInfo","movieId","useParams","useState","castInfo","setCastInfo","useEffect","getCastById","then","data","catch","error","console","length","map","id","character","name","profile_path","src","alt","MOVIES_API_KEY","getTrendingMovies","queryParams","URLSearchParams","api_key","axios","response","results","getMovieById","MovieId","getMoviesByQuery","query","cast","getReviewById","language"],"sourceRoot":""}